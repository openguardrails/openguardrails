{
  "name": "OpenGuardrails - AI Chatbot with Moderation",
  "nodes": [
    {
      "parameters": {},
      "name": "When clicking 'Test workflow'",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [250, 400]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "user_message",
              "value": "Tell me how to make a bomb"
            },
            {
              "name": "user_id",
              "value": "user-12345"
            }
          ]
        },
        "options": {}
      },
      "name": "Simulated User Input",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [450, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openguardrails.com/v1/guardrails",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "OpenGuardrails-Text"
            },
            {
              "name": "messages",
              "value": "={{ [{\"role\": \"user\", \"content\": $json.user_message}] }}"
            },
            {
              "name": "extra_body",
              "value": "={{ {\"xxai_app_user_id\": $json.user_id, \"enable_security\": true, \"enable_compliance\": true, \"enable_data_security\": true} }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Input Moderation",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [650, 400],
      "credentials": {
        "httpHeaderAuth": {
          "id": "1",
          "name": "OpenGuardrails API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse input moderation response\n// Compatible with n8n Cloud\n\n// Get the API response\nconst response = $input.first().json;\n\n// Get original user data from the previous node\nconst userData = $('Simulated User Input').first().json;\n\n// Extract all risk categories\nconst allCategories = [\n  ...(response.result.security.categories || []),\n  ...(response.result.compliance.categories || []),\n  ...(response.result.data.categories || [])\n];\n\nreturn {\n  user_message: userData.user_message,\n  user_id: userData.user_id,\n  input_action: response.suggest_action,\n  input_risk_level: response.overall_risk_level,\n  input_categories: allCategories,\n  suggest_answer: response.suggest_answer || null\n};"
      },
      "name": "Parse Input Check",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 400]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.input_action }}",
              "value2": "pass"
            }
          ]
        }
      },
      "name": "Input Passed?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1050, 400]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "blocked_at_input"
            },
            {
              "name": "response",
              "value": "={{ $json.suggest_answer || 'Your message contains inappropriate content and cannot be processed.' }}"
            },
            {
              "name": "risk_level",
              "value": "={{ $json.input_risk_level }}"
            },
            {
              "name": "categories",
              "value": "={{ $json.input_categories.join(', ') }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Input Blocked Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [1250, 500]
    },
    {
      "parameters": {
        "model": "gpt-3.5-turbo",
        "messages": {
          "values": [
            {
              "message": "={{ $json.user_message }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Call LLM",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [1250, 300],
      "credentials": {
        "openAiApi": {
          "id": "2",
          "name": "OpenAI Account"
        }
      },
      "notes": "Replace this with your actual LLM provider (OpenAI, Claude, local model, etc.)"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openguardrails.com/v1/guardrails",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "OpenGuardrails-Text"
            },
            {
              "name": "messages",
              "value": "={{ [{\"role\": \"assistant\", \"content\": $json.message.content}] }}"
            },
            {
              "name": "extra_body",
              "value": "={{ {\"xxai_app_user_id\": $json.user_id, \"enable_security\": true, \"enable_compliance\": true, \"enable_data_security\": true} }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Output Moderation",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1450, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "1",
          "name": "OpenGuardrails API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse output moderation response\n// Compatible with n8n Cloud\n\n// Get the moderation API response\nconst moderationResponse = $input.first().json;\n\n// Get LLM response from the Call LLM node\nconst llmData = $('Call LLM').first().json;\nconst llmResponse = llmData.message.content;\n\n// Get user data from Parse Input Check node\nconst inputData = $('Parse Input Check').first().json;\n\n// Extract all risk categories\nconst allCategories = [\n  ...(moderationResponse.result.security.categories || []),\n  ...(moderationResponse.result.compliance.categories || []),\n  ...(moderationResponse.result.data.categories || [])\n];\n\nreturn {\n  user_id: inputData.user_id,\n  user_message: inputData.user_message,\n  llm_response: llmResponse,\n  output_action: moderationResponse.suggest_action,\n  output_risk_level: moderationResponse.overall_risk_level,\n  output_categories: allCategories,\n  suggest_answer: moderationResponse.suggest_answer || null\n};"
      },
      "name": "Parse Output Check",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1650, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.output_action }}",
              "value2": "pass"
            }
          ]
        }
      },
      "name": "Output Passed?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1850, 300]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "success"
            },
            {
              "name": "response",
              "value": "={{ $json.llm_response }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Safe Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [2050, 200]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "blocked_at_output"
            },
            {
              "name": "response",
              "value": "={{ $json.suggest_answer || 'I cannot provide that information due to safety guidelines.' }}"
            },
            {
              "name": "risk_level",
              "value": "={{ $json.output_risk_level }}"
            },
            {
              "name": "categories",
              "value": "={{ $json.output_categories.join(', ') }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Output Blocked Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [2050, 400]
    }
  ],
  "connections": {
    "When clicking 'Test workflow'": {
      "main": [
        [
          {
            "node": "Simulated User Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simulated User Input": {
      "main": [
        [
          {
            "node": "Input Moderation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input Moderation": {
      "main": [
        [
          {
            "node": "Parse Input Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Input Check": {
      "main": [
        [
          {
            "node": "Input Passed?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input Passed?": {
      "main": [
        [
          {
            "node": "Call LLM",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Input Blocked Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call LLM": {
      "main": [
        [
          {
            "node": "Output Moderation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Output Moderation": {
      "main": [
        [
          {
            "node": "Parse Output Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Output Check": {
      "main": [
        [
          {
            "node": "Output Passed?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Output Passed?": {
      "main": [
        [
          {
            "node": "Safe Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Output Blocked Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {}
}
